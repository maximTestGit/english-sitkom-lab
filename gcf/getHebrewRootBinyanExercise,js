/*
function-hebrew-root-binyan-exercise-test
{
  "dependencies": {
    "@google-cloud/functions-framework": "^3.0.0",
    "node-fetch": "^2.6.1",
    "firebase-admin": "^12.4.0",
    "cors": "^2.8.5"
  }
}
*/
const admin = require('firebase-admin');
const cors = require('cors')({ origin: true });

// Initialize Firestore
admin.initializeApp();
//const db = admin.firestore();

exports.getHebrewRootBinyanExercise = async (req, res) => {
    cors(req, res, async () => {
        console.log(`getHebrewRootBinyanExercise,js: -----------------------------------------`);
        res.set('Access-Control-Allow-Origin', '*'); // Allow all origins
        res.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE'); // Allow these methods
        res.set('Access-Control-Allow-Headers', 'Content-Type'); // Allow these headers

        if (req.method === 'OPTIONS') {
            // Handle preflight requests
            res.set('Access-Control-Max-Age', '3600'); // Cache preflight response for 1 hour
            res.end();
            return;
        }

        let isUserAuthenticated = false;
        const authHeader = req.header('Authorization');
        const idToken = authHeader?.split('Bearer ')?.[1];

        if (idToken) {
            const decodedToken = await admin.auth().verifyIdToken(idToken);
            console.log(`getHebrewRootBinyanExercise: Authenticated user: ${decodedToken.email}`);
            isUserAuthenticated = true;
        } else {
            console.log(`getHebrewRootBinyanExercise: User is not Authenticated`);
            //res.status(401).send('Unauthorized');
        }

        try {
            var user,
                root,
                //infinitive,
                binyan,
                tense,
                userLanguage,
                complexity,
                style,
                length;
            if (req.method === 'POST') {
                if (!isUserAuthenticated) {
                    res.status(401).send('Unauthorized');
                    return;
                }
                const requestBody = req.body;
                console.log('getHebrewRootBinyanExercise,js: Request Body:', requestBody);
                user = requestBody.user;
                root = requestBody.root;
                //infinitive = requestBody.infinitive;
                binyan = requestBody.binyan;
                tense = requestBody.tense;
                userLanguage = requestBody.userLanguage;
                complexity = requestBody.complexity;
                style = requestBody.style;
                length = requestBody.length;
            } else {
                root = 'למד';
                //infinitive = 'לכתוב';
                binyan = 'פעל';
                tense = 'past';
                userLanguage = 'ru';
                complexity = 'beginner';
                style = 'Joke';
                length = 10;
            }

            console.log(`getHebrewRootBinyanExercise,js: user: root: ${root}, binyan: ${binyan}, tense: ${tense}, userLanguage: ${userLanguage}, complexity: ${complexity}, style: ${style}, length: ${length}`);
            var exerciseData = await getHebrewRootBinyanExerciseData(root, binyan, tense, userLanguage, complexity, style, length);
            console.log(JSON.stringify(exerciseData, null, 2)); // Log exerciseData in a readable format

            res.send(exerciseData);
        } catch (error) {
            console.error('getHebrewRootBinyanExercise: Error:', error);
            res.status(500).send(error.message);
        }
    })
}

async function getHebrewRootBinyanExerciseData(root, binyan, tense, userLanguage, complexity, style, length) {
    const promptFormatRequest =
        `finally generate a response as object of the following format:
{
"text": "string", // generated text in Hebrew
"textTranslation": "string" // translation of the text in student's language 
}
The response should be structured exactly as shown above, with all fields populated.`;

    const prompt =
        `Generate a short story in Hebrew with the following parameters:` +
        `- the verb of the following hebrew root: ${root}` +
        `- of the binyan: ${binyan}` +
        `- Tense: ${tense}` +
        `- Number of sentences: ${length}` +
        `- Language complexity: ${complexity} (e.g., kid, beginner, intermediate, advanced)` +
        `- Student's language: ${userLanguage}` +
        `Your task is to create a coherent narrative that maximizes the use of specified verbs, adhering to these guidelines:` +
        `Use the given verb ( ${root}, ${binyan}, ${tense})` +
        `Utilize infinitives and various person, numbers, and genders.` +
        `Ensure the story has a clear beginning, middle, and end, with a plot related to the root's meaning.` +
        `Make the story flow naturally.` +
        `Adjust vocabulary and sentence structure to match the specified language complexity of  [COMPLEXITY].` +
        `Write the story in Hebrew, using correct grammar and punctuation. Then, provide a translation of the story in the  [STUDENT_LANGUAGE] language. The translation should accurately convey the meaning while maintaining readability in the target language.` +
        `For the Hebrew story:` +
        `- Beginner: Use simple sentence structures and common vocabulary.` +
        `- Intermediate: Incorporate more complex sentences and a broader range of vocabulary.` +
        `- Advanced: Utilize sophisticated language, including idioms and literary devices.` +
        `For the translation:` +
        `- Maintain the essence of the story and the use of root-derived words where possible.` +
        `- Adapt idioms or expressions to make sense in the target language.` +
        `- Preserve the overall structure and number of sentences from the original Hebrew version.` +
        `${promptFormatRequest}`;
    const systemRole = 'You are an expert Hebrew language teacher and curriculum developer specializing in creating engaging and effective Hebrew learning materials. Your expertise spans all levels of Hebrew proficiency, from beginners to advanced learners. You have a deep understanding of Hebrew grammar, vocabulary, idiomatic expressions, and cultural context'
    const result = await assistantRequest(systemRole, prompt);
    return result;
}

async function assistantRequest(prompt, content, model = 'gpt-4o', maxTokens = 1000, temperature = 0.5) {
    console.log(`getExerciseAssistance: running Prompt: ${prompt}`);
    let result = null;
    const apiKey = process.env.OPENAI_API_KEY;
    const url = 'https://api.openai.com/v1/chat/completions';
    console.log(`getExerciseAssistance: running theContent: ${content}`);

    const headers = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
    };

    const data = {
        model: model,
        messages: [
            { role: 'system', content: prompt },
            { role: 'user', content: `Process the following text: "${content}"` }
        ],
        max_tokens: maxTokens,
        temperature: temperature
    };

    const options = {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(data)
    };

    try {
        console.log(`getExerciseAssistance: START request for assistanceRequest url: ${url}`);
        const response = await fetch(url, options);
        console.log('getExerciseAssistance: Response of assistanceRequest:', response);
        if (!response.ok) {
            console.error(`getExerciseAssistance: Error in assistanceRequest: response status: ${response.status}`);
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const resultData = await response.json();
        console.log('getExerciseAssistance: Result:', resultData);

        result = resultData.choices[0].message.content;
        console.log('getExerciseAssistance: Response Text:', result);
    } catch (error) {
        console.error('getExerciseAssistance: Error:', error);
        throw error;
    }

    return result;
}
